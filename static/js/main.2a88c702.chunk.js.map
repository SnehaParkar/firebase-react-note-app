{"version":3,"sources":["components/Sidebar.js","components/Editor.js","components/Footer.js","firebase.js","App.js","index.js"],"names":["Sidebar","props","noteElements","notes","map","note","index","React","createElement","key","id","className","concat","currentNote","onClick","setCurrentNoteId","body","split","deleteNote","newNote","Editor","_ref","tempNoteText","setTempNoteText","selectedTab","setSelectedTab","useState","converter","Showdown","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","ReactMde","value","onChange","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","makeHtml","minEditorHeight","heightUnits","Footer","href","target","rel","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","notesCollection","collection","App","setNotes","currentNoteId","find","sortedNotes","sort","a","b","updatedAt","async","createNewNote","createdAt","Date","now","newNoteRef","addDoc","useEffect","onSnapshot","snapshot","notesArr","docs","doc","data","_notes$","timeoutId","setTimeout","text","toBeUpdatedNote","setDoc","merge","updateNote","clearTimeout","length","Split","sizes","direction","noteId","toBeDeletedNote","deleteDoc","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.2a88c702.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default function Sidebar(props) {\n\tconst noteElements = props.notes.map((note, index) => (\n\t\t<div key={note.id}>\n\t\t\t<div\n\n\t\t\t\tclassName={`title ${note.id === props.currentNote.id ? \"selected-note\" : \"\"\n\t\t\t\t\t}`}\n\t\t\t\tonClick={() => props.setCurrentNoteId(note.id)}\n\t\t\t>\n\t\t\t\t<h4 className=\"text-snippet\">{note.body.split(\"\\n\")[0]}</h4>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"delete-btn\"\n\t\t\t\t\tonClick={() => props.deleteNote(note.id)}\n\t\t\t\t>\n\t\t\t\t\t<i className=\"gg-trash trash-icon\"></i>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t))\n\n\n\n\treturn (\n\t\t<section className=\"pane sidebar\">\n\t\t\t<div className=\"sidebar--header\">\n\t\t\t\t<h3>Notes</h3>\n\t\t\t\t<button className=\"new-note\" onClick={props.newNote}>+</button>\n\t\t\t</div>\n\t\t\t{noteElements}\n\t\t</section>\n\t)\n}\n","import React from \"react\"\nimport ReactMde from \"react-mde\"\nimport Showdown from \"showdown\"\n\nexport default function Editor({ tempNoteText, setTempNoteText }) {\n\tconst [selectedTab, setSelectedTab] = React.useState(\"write\")\n\n\tconst converter = new Showdown.Converter({\n\t\ttables: true,\n\t\tsimplifiedAutoLink: true,\n\t\tstrikethrough: true,\n\t\ttasklists: true,\n\t})\n\n\treturn (\n\t\t<section className=\"pane editor\">\n\n\t\t\t<ReactMde\n\t\t\t\tvalue={tempNoteText}\n\t\t\t\tonChange={setTempNoteText}\n\t\t\t\tselectedTab={selectedTab}\n\t\t\t\tonTabChange={setSelectedTab}\n\t\t\t\tgenerateMarkdownPreview={(markdown) =>\n\t\t\t\t\tPromise.resolve(converter.makeHtml(markdown))\n\t\t\t\t}\n\t\t\t\tminEditorHeight={80}\n\t\t\t\theightUnits=\"vh\"\n\t\t\t/>\n\n\t\t</section>\n\t)\n}\n","import React from \"react\";\n\nexport default function Footer() {\n\treturn (\n\t\t<footer className=\"footer\">\n\t\t\t<small>\n\t\t\t\tCoded with ❤️ by{\" \"}\n\t\t\t\t<a\n\t\t\t\t\thref=\"https://github.com/snehaparkar\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t>\n\t\t\t\t\tSneha Parkar\n\t\t\t\t</a>\n\t\t\t\t.\n\t\t\t</small>\n\t\t</footer>\n\t);\n}","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection } from \"firebase/firestore\"\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n\tapiKey: \"AIzaSyBMIs8OIe4FDtgS1TZaF9ya2aPCevyfRN4\",\n\tauthDomain: \"react-firebase-notes-dae65.firebaseapp.com\",\n\tprojectId: \"react-firebase-notes-dae65\",\n\tstorageBucket: \"react-firebase-notes-dae65.appspot.com\",\n\tmessagingSenderId: \"746850927874\",\n\tappId: \"1:746850927874:web:fcd6c48d5af9c7a58c6e1b\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const db = getFirestore(app)\nexport const notesCollection = collection(db, \"notes\")\n\n","\nimport './App.css';\nimport React from \"react\"\nimport Sidebar from \"./components/Sidebar\"\nimport Editor from \"./components/Editor\"\nimport Footer from './components/Footer';\nimport Split from \"react-split\"\nimport { onSnapshot, addDoc, doc, deleteDoc, setDoc } from \"firebase/firestore\"\nimport { notesCollection, db } from './firebase';\n\nexport default function App() {\n\n  const [notes, setNotes] = React.useState([])\n  const [currentNoteId, setCurrentNoteId] = React.useState(\"\")\n  const [tempNoteText, setTempNoteText] = React.useState(\"\")\n\n  const currentNote =\n    notes.find(note => note.id === currentNoteId)\n    || notes[0]\n\n  const sortedNotes = notes.sort((a, b) => b.updatedAt - a.updatedAt)\n\n  React.useEffect(() => {\n    // this is basically web-socket connection for firestore collection\n    const unsubscribe = onSnapshot(notesCollection, (snapshot) => {\n      // Sync up our local notes array with the snapshot data\n      // console.log(\"THINGS ARE CHANGING!\", snapshot);\n      const notesArr = snapshot.docs.map(doc => ({\n        ...doc.data(),\n        id: doc.id\n      }))\n      setNotes(notesArr);\n\n    })\n    return unsubscribe\n  }, []);\n\n  React.useEffect(() => {\n    if (!currentNoteId) {\n      setCurrentNoteId(notes[0]?.id)\n    }\n  }, [notes])\n\n  React.useEffect(() => {\n    if (currentNote) {\n      setTempNoteText(currentNote.body)\n    }\n  }, [currentNote])\n\n  // debouncing logic , make delay in seding req. and wait for user to type more text.\n  React.useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (tempNoteText !== currentNote?.body)\n        updateNote(tempNoteText)\n    }, 500)\n    return () => clearTimeout(timeoutId);\n  }, [tempNoteText])\n\n  // CREATE / UPDATE/ DELETE\n  async function createNewNote() {\n    const newNote = {\n      body: \"# Type your markdown note's title here\",\n      createdAt: Date.now(),\n      updatedAt: Date.now()\n    }\n    const newNoteRef = await addDoc(notesCollection, newNote)\n    //setNotes(prevNotes => [newNote, ...prevNotes])\n    setCurrentNoteId(newNoteRef.id)\n\n  }\n\n  async function updateNote(text) {\n    const toBeUpdatedNote = doc(db, \"notes\", currentNoteId);\n    await setDoc(toBeUpdatedNote,\n      {\n        body: text,\n        updatedAt: Date.now()\n      },\n      { merge: true });\n  }\n\n  async function deleteNote(noteId) {\n    const toBeDeletedNote = doc(db, \"notes\", noteId);\n    await deleteDoc(toBeDeletedNote);\n  }\n\n  return (\n    <main>\n      {\n        notes.length > 0\n          ?\n          <Split\n            sizes={[30, 70]}\n            direction=\"horizontal\"\n            className=\"split\"\n          >\n            <Sidebar\n              notes={sortedNotes}\n              deleteNote={deleteNote}\n              currentNote={currentNote}\n              setCurrentNoteId={setCurrentNoteId}\n              newNote={createNewNote}\n            />\n            <Editor\n              tempNoteText={tempNoteText}\n              setTempNoteText={setTempNoteText}\n            />\n\n          </Split>\n          :\n          <div className=\"no-notes\">\n            <h1>You have no notes</h1>\n            <button className=\"first-note\" onClick={createNewNote}>Create one now</button>\n          </div>\n\n      }\n      <Footer />\n    </main >\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);"],"sourceRoot":""}